use once_cell::sync::Lazy;
use subvt_metrics::registry::{Histogram, IntCounter, IntCounterVec, IntGauge};

const METRIC_PREFIX: &str = "subvt_notification_generator";

pub(crate) fn notification_counter(
    notification_type: &str,
    notification_channel: &str,
) -> IntCounter {
    static METER: Lazy<IntCounterVec> = Lazy::new(|| {
        subvt_metrics::registry::register_int_counter_vec(
            METRIC_PREFIX,
            "notification_count",
            "The number of notifications generated by type and channel",
            &["notification_type", "notification_channel"],
        )
        .unwrap()
    });
    METER.with_label_values(&[notification_type, notification_channel])
}

pub(crate) fn block_processor_error_counter() -> IntCounter {
    static METER: Lazy<IntCounter> = Lazy::new(|| {
        subvt_metrics::registry::register_int_counter(
            METRIC_PREFIX,
            "block_processor_error_count",
            "The total number of errors happened while inspecting the finalized blocks for notifications",
        )
            .unwrap()
    });
    METER.clone()
}

pub(crate) fn processed_block_number() -> IntGauge {
    static METER: Lazy<IntGauge> = Lazy::new(|| {
        subvt_metrics::registry::register_int_gauge(
            METRIC_PREFIX,
            "processed_block_number",
            "Number of the last processed block",
        )
        .unwrap()
    });
    METER.clone()
}

pub fn block_processing_time_ms() -> Histogram {
    static METER: Lazy<Histogram> = Lazy::new(|| {
        subvt_metrics::registry::register_histogram(
            METRIC_PREFIX,
            "block_processing_time_ms",
            "Block processing time in milliseconds",
            vec![
                50.0, 100.0, 250.0, 500.0, 750.0, 1000.0, 1_500.0, 2_500.0, 5_000.0, 10_000.0,
                15_000.0, 30_000.0,
            ],
        )
        .unwrap()
    });
    METER.clone()
}

pub(crate) fn processed_validator_list_block_number() -> IntGauge {
    static METER: Lazy<IntGauge> = Lazy::new(|| {
        subvt_metrics::registry::register_int_gauge(
            METRIC_PREFIX,
            "processed_validator_list_block_number",
            "Number of the last processed validator list block",
        )
        .unwrap()
    });
    METER.clone()
}

pub fn validator_list_processing_time_ms() -> Histogram {
    static METER: Lazy<Histogram> = Lazy::new(|| {
        subvt_metrics::registry::register_histogram(
            METRIC_PREFIX,
            "validator_list_processing_time_ms",
            "Block processing time in milliseconds",
            vec![
                50.0, 100.0, 250.0, 500.0, 750.0, 1000.0, 1_500.0, 2_500.0, 5_000.0, 10_000.0,
                15_000.0, 30_000.0,
            ],
        )
        .unwrap()
    });
    METER.clone()
}

pub(crate) fn validator_list_error_counter() -> IntCounter {
    static METER: Lazy<IntCounter> = Lazy::new(|| {
        subvt_metrics::registry::register_int_counter(
            METRIC_PREFIX,
            "validator_list_error_count",
            "The total number of errors happened while inspecting the validator list for notifications",
        )
            .unwrap()
    });
    METER.clone()
}
